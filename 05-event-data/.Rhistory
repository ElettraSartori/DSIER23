###
# brexit impact
# 220615
###
# getwd()
setwd("09-event-data")
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
data = fread(files[1])
setwd("~/work/Teaching/DSIER23/05-event-data")
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
files[1]
data = fread(files[1])
View(data)
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
data = fread(files[1])
data = fread(cmd = str_c("gunzip -c ", files[1])) # this command is equivalent
# data = fread(cmd = str_c("unzip -p ", files[1]))  # automatically unzips file and then reads into data.table
# first look at the data
View(data)
head(data)
data[, uniqueN(Reporter)]
data[, uniqueN(Partner)]
data[, uniqueN(Commodity)]
data[`Trade Flow Code` == 1, .N]
View(data)
unique(data$`Trade Flow`)
data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)]
# share of non-zero flows at hs2 level
data[`Trade Flow Code` == 1, .N] / (data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)])
# read all files
files = list.files("input/monthly_hs2", full.names = T)
for (f in files) {
print(f)
# load
data = fread(f)
# format and clean data
data = data[, .(date = Period,
origin = Reporter,
destination = Partner,
hs = `Commodity Code`,
flow = `Trade Flow Code`,
value = `Trade Value (US$)`)]
# make dates pretty
data[, date := ymd(str_c(date, "01"))]
data[, date := date + months(1) - days(1)]
# str(data)
# use country codes
data[, origin := countryname(origin, "iso3c")]
data[, destination := countryname(destination, "iso3c")]
# countrycode("Germany", "country.name", "iso3c")
# countrycode("Deutschland", "country.name.de", "iso3c")
# countryname(c("Deutschland", "Alemania", "Allemagne", "Duitsland"), "iso3c")
# transform value from integer to numeric
data[, value := as.numeric(value)]
# only take obs with non-missing variable
data = data[complete.cases(data)]
fwrite(data,
"temp/monthly_1921.csv.gz",
compress = "gzip",
append = T)
}
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
data = fread(files[1])
data = fread(cmd = str_c("gunzip -c ", files[1])) # this command is equivalent
# data = fread(cmd = str_c("unzip -p ", files[1]))  # automatically unzips file and then reads into data.table
# first look at the data
View(data)
head(data)
data[, uniqueN(Reporter)]
data[, uniqueN(Partner)]
data[, uniqueN(Commodity)]
data[, .N]
data[`Trade Flow Code` == 1, .N]
data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)]
# share of non-zero flows at hs2 level
data[`Trade Flow Code` == 1, .N] / (data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)])
# read all files
files = list.files("input/monthly_hs2", full.names = T)
for (f in files) {
print(f)
# load
data = fread(f)
# format and clean data
data = data[, .(date = Period,
origin = Reporter,
destination = Partner,
hs = `Commodity Code`,
flow = `Trade Flow Code`,
value = `Trade Value (US$)`)]
# make dates pretty
data[, date := ymd(str_c(date, "01"))]
data[, date := date + months(1) - days(1)]
# str(data)
# use country codes
data[, origin := countryname(origin, "iso3c")]
data[, destination := countryname(destination, "iso3c")]
# countrycode("Germany", "country.name", "iso3c")
# countrycode("Deutschland", "country.name.de", "iso3c")
# countryname(c("Deutschland", "Alemania", "Allemagne", "Duitsland"), "iso3c")
# transform value from integer to numeric
data[, value := as.numeric(value)]
# only take obs with non-missing variable
data = data[complete.cases(data)]
fwrite(data,
"temp/monthly_1921.csv.gz",
compress = "gzip",
append = T)
}
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
data = fread(files[1])
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
data = fread(files[1])
data = fread(cmd = str_c("gunzip -c ", files[1])) # this command is equivalent
# data = fread(cmd = str_c("unzip -p ", files[1]))  # automatically unzips file and then reads into data.table
# first look at the data
View(data)
head(data)
data[, uniqueN(Reporter)]
data[, uniqueN(Partner)]
data[, uniqueN(Commodity)]
data[, .N]
data[`Trade Flow Code` == 1, .N]
data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)]
# share of non-zero flows at hs2 level
data[`Trade Flow Code` == 1, .N] / (data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)])
# read all files
files = list.files("input/monthly_hs2", full.names = T)
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# list of files
files = list.files("input/monthly_hs2", full.names = T)
data = fread(files[1])
data = fread(cmd = str_c("gunzip -c ", files[1])) # this command is equivalent
# data = fread(cmd = str_c("unzip -p ", files[1]))  # automatically unzips file and then reads into data.table
# first look at the data
View(data)
head(data)
data[, uniqueN(Reporter)]
data[, uniqueN(Partner)]
data[, uniqueN(Commodity)]
data[, .N]
data[`Trade Flow Code` == 1, .N]
data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)]
# share of non-zero flows at hs2 level
data[`Trade Flow Code` == 1, .N] / (data[, uniqueN(Reporter)] * data[, uniqueN(Partner)] * data[, uniqueN(Commodity)])
wdir <- getwd()
dir.create(file.path(wdir, "temp"), showWarnings = FALSE)
# read all files
files = list.files("input/monthly_hs2", full.names = T)
for (f in files) {
print(f)
# load
data = fread(f)
# format and clean data
data = data[, .(date = Period,
origin = Reporter,
destination = Partner,
hs = `Commodity Code`,
flow = `Trade Flow Code`,
value = `Trade Value (US$)`)]
# make dates pretty
data[, date := ymd(str_c(date, "01"))]
data[, date := date + months(1) - days(1)]
# str(data)
# use country codes
data[, origin := countryname(origin, "iso3c")]
data[, destination := countryname(destination, "iso3c")]
# countrycode("Germany", "country.name", "iso3c")
# countrycode("Deutschland", "country.name.de", "iso3c")
# countryname(c("Deutschland", "Alemania", "Allemagne", "Duitsland"), "iso3c")
# transform value from integer to numeric
data[, value := as.numeric(value)]
# only take obs with non-missing variable
data = data[complete.cases(data)]
fwrite(data,
"monthly_1921.csv.gz",
compress = "gzip",
append = T)
}
rm(data)
help(gc())
help(!gc())
?
lm
###
# brexit impact
# 220615
###
# getwd()
setwd("~/work/Teaching/DSIER23/05-event-data")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# definitions
EU27 = c("DEU", "AUT", "BEL", "DNK",
"FIN", "FRA", "GRC", "IRL",
"ITA", "LUX", "NLD", "PRT",
"ESP", "SWE", "MLT", "CYP",
"EST", "LTU", "LVA", "CZE",
"HUN", "BGR", "ROU", "POL",
"SVK", "SVN", "HRV")
# load full dataset
data = fread("temp/monthly_1921.csv.gz")
data = data[flow == 2]
gc()
data[, .N, by = origin] # greater or equal than 125
data[, .(date, origin)] %>%
unique() %>%
.[, .N, by = .(year(date), origin)] %>%
.[, .(N = sum(N)), by = origin]
# brexit impact
data[, unique(hs)]
exports_uk = data[origin == "GBR" & hs == "TOTAL", -c("origin", "hs", "flow")]
# plot: aggregate over time
plot_data = exports_uk[, .(value = sum(value)), by = date]
ggplot(plot_data) +
theme_minimal() +
geom_line(aes(x = date, y = value / 1000000)) +
geom_vline(aes(xintercept = ymd("2020-01-31")), color = "red") +
geom_vline(aes(xintercept = ymd("2020-12-31")), color = "red") +
scale_x_date(name = NULL) +
scale_y_continuous(name = "Total exports in mn USD",
labels = scales::dollar) +
ggtitle(label = "Total value of UK exports",
subtitle = "UN Comtrade Data, 2019 – 2021")
# plot: compare to other countries
plot_data = data[origin %in% c("GBR", "IRL", "ISL", "SWE"), .(value = sum(value)), by = .(date, origin)]
plot_data[, value_norm := value / mean(value[year(date) == "2019"]), by = origin]
ggplot(plot_data) +
theme_minimal() +
geom_line(aes(x = date, y = value_norm, group = origin, color = origin)) +
geom_vline(aes(xintercept = ymd("2020-01-31")), color = "red") +
geom_vline(aes(xintercept = ymd("2020-12-31")), color = "red") +
scale_x_date(name = NULL) +
scale_y_continuous(name = "Total exports compared to average of 2019") +
ggtitle(label = "Impact of Brexit",
subtitle = "UN Comtrade Data, 2019 – 2021")
# plot: compare to other countries the exports only to EU27
plot_data = data[origin %in% c("GBR", "IRL", "ISL", "SWE") & destination %in% EU27, .(value = sum(value)), by = .(date, origin)]
plot_data[, value_norm := value / mean(value[year(date) == "2019"]), by = origin]
plot_data[, Country := countrycode(origin, "iso3c", "country.name")]
ggplot(plot_data) +
theme_minimal() +
geom_line(aes(x = date, y = value_norm, group = Country, color = Country)) +
geom_vline(aes(xintercept = ymd("2020-01-31")), color = "red") +
geom_vline(aes(xintercept = ymd("2020-12-31")), color = "red") +
scale_x_date(name = NULL) +
scale_y_continuous(name = "Exports to EU compared to average of 2019") +
ggtitle(label = "Impact of Brexit",
subtitle = "UN Comtrade Data, 2019 – 2021")
# regressions instead of eyeball econometrics
reg_data = data[origin %in% c("GBR", "IRL", "ISL", "SWE") & destination %in% EU27, .(value = sum(value)), by = .(date, origin)]
reg_data[, treatment := (origin == "GBR") * (date > ymd("2020-12-31"))]
reg1 = feols(log(value) ~ treatment | date + origin, data = reg_data)
etable(reg1)
reg1
summary(reg1)
package.install("fixest")
install.packages("fixest")
install.packages("fixest")
install.packages("fixest")
if (!require("pacman")) install.packages("pacman"); library("pacman")
p_load(data.table)
p_load(stringr)
p_load(lubridate)
p_load(countrycode)
p_load(purrr)
p_load(ggplot2)
p_load(scales)
p_load(fixest)
# regressions instead of eyeball econometrics
reg_data = data[origin %in% c("GBR", "IRL", "ISL", "SWE") & destination %in% EU27, .(value = sum(value)), by = .(date, origin)]
reg_data[, treatment := (origin == "GBR") * (date > ymd("2020-12-31"))]
reg1 = feols(log(value) ~ treatment | date + origin, data = reg_data)
etable(reg1)
reg1
stargazer::stargazer(reg1)
reg1$fml_all
install.packages("fixest")
p_load(fixest)
plot_data = data[origin %in% c("GBR", "IRL", "ISL", "SWE") & destination %in% EU27, .(value = sum(value)), by = .(date, origin)]
plot_data[, value_norm := value / mean(value[year(date) == "2019"]), by = origin]
plot_data[, Country := countrycode(origin, "iso3c", "country.name")]
ggplot(plot_data) +
theme_minimal() +
geom_line(aes(x = date, y = value_norm, group = Country, color = Country)) +
geom_vline(aes(xintercept = ymd("2020-01-31")), color = "red") +
geom_vline(aes(xintercept = ymd("2020-12-31")), color = "red") +
scale_x_date(name = NULL) +
scale_y_continuous(name = "Exports to EU compared to average of 2019") +
ggtitle(label = "Impact of Brexit",
subtitle = "UN Comtrade Data, 2019 – 2021")
# regressions instead of eyeball econometrics
reg_data = data[origin %in% c("GBR", "IRL", "ISL", "SWE") & destination %in% EU27, .(value = sum(value)), by = .(date, origin)]
reg_data[, treatment := (origin == "GBR") * (date > ymd("2020-12-31"))]
reg1 = feols(log(value) ~ treatment | date + origin, data = reg_data)
etable(reg1)
etable(reg1)
summary(reg1)
